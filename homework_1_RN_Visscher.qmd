---
title: "Homework 1"
format: html
editor: visual
---

1\. What is the number of nodes and links?

2\. What is the average degree in the network? And the standard deviation of the degree?

3.  Plot the degree distribution in linear-linear scale and in log-log-scale. What is the degree of the most connected node?

4.  What is the clustering coefficient (transitivity) in the network?

5\. What is the assortativity (degree) in the network?

6\. Using the Louvain method, does the network have a community structure? If so, what is its modularity?

7\. Test that the clustering coefficient in the network cannot be statistically explained by a configuration model in which the nodes have the same degree as the original.

8.  Visualize the neighborhood of the node with the largest centrality (closeness)

```{r}
library(tidyverse)
library(igraph)
library(igraphdata)
library(jsonlite)
library(visNetwork)
library(widgetframe)
library(ggthemes)
library(ggraph)
```

### Data wrangling

```{r}
data <-read.csv("migration_data.csv")
pop_data <- read.csv("population_data.csv")
continents <- read.csv("continents2.csv") |> 
  select(alpha.3, sub.region, region)

data <- data |> 
  rename(cntr_origin = Country.Origin.Name,
         cntr_origin_code = Country.Origin.Code,
         gender = Migration.by.Gender.Name,
         gender_code = Migration.by.Gender.Code,
         cntr_dest = Country.Dest.Name,
         cntr_dest_code = Country.Dest.Code,
         "y1960" = X1960..1960.,
         "y1970" = X1970..1970.,
         "y1980" = X1980..1980.,
         "y1990" = X1990..1990.,
         "y2000" = X2000..2000.) |> 
  mutate(y1960 = as.numeric(y1960),
         y1970 = as.numeric(y1970),
         y1980 = as.numeric(y1980),
         y1990 = as.numeric(y1990),
         y2000 = as.numeric(y2000)) |> 
  group_by(cntr_origin, cntr_dest) |> 
  mutate(y1960 = sum(y1960),
         y1970 = sum(y1970),
         y1980 = sum(y1980),
         y1990 = sum(y1990),
         y2000 = sum(y2000)) |> 
  ungroup() |> 
  left_join(continents, by = c("cntr_origin_code" = "alpha.3")) |> 
  rename(sub_region_origin = sub.region,
         region_origin = region) |> 
  left_join(continents, by = c("cntr_dest_code" = "alpha.3")) |> 
  rename(sub_region_dest = sub.region,
         region_dest = region)

pop_data <- pop_data |> 
  rename(cntr = Country.Name,
         cntr_code = Country.Code,
         "pop_y1960" = X1960,
         "pop_y1970" = X1970,
         "pop_y1980" = X1980,
         "pop_y1990" = X1990,
         "pop_y2000" = X2000) |> 
  select(cntr, cntr_code, pop_y1960, pop_y1970, pop_y1980, pop_y1990, pop_y2000)

```

```{r}

data_func <- function(years){
  
 data_year <- data |> 
  select(cntr_origin, cntr_dest, years) |> 
  filter(!!sym(years) > 0)
  
  }

# List to store data frames for different years
data_frames <- list()

# Loop over different years
years <- c("y1960", "y1970", "y1980", "y1990", "y2000") 
for (year in years) {
  data_frames[[paste0("data_", year)]] <- data_func(year)
  
}


node_func <- function(data){
  
  nodes <- data |> 
  select(cntr_origin) |> 
  distinct(cntr_origin)
  
  g <- graph_from_data_frame(data, vertices=nodes, directed = TRUE)
  
  
}


nodes <- list()


for (i in seq_along(data_frames)) {
  nodes[[paste0("nodes_", names(data_frames)[i])]] <- node_func(data = data_frames[[i]])
}


g1960 <- nodes[["nodes_data_y1960"]]
g1970 <- nodes[["nodes_data_y1970"]]
g1980 <- nodes[["nodes_data_y1980"]]
g1990 <- nodes[["nodes_data_y1990"]]
g2000 <- nodes[["nodes_data_y2000"]]
```

### 1. The number of nodes and links

```{r}

num_nodes_edges <- function(g, years){
  
num_nodes <- vcount(g)
num_edges <- ecount(g)

print(paste0("In the network of ", years))
print(paste0("The number of nodes are ", num_nodes))
print(paste0("The number of edges are ", num_edges))

}

for (i in seq_along(nodes)){
  
  num_nodes_edges(g = nodes[[i]], years = years[i])
    
}
```

### 2. Degree

The number of connections

-   *What is the average degree in the network? And the standard deviation of the degree?*

-   *Plot the degree distribution in linear-linear scale and in log-log-scale.*

-   *What is the degree of the most connected node?*

<!-- -->

-   **`"all"`**: Computes the total degree of each vertex, which is the sum of its in-degree and out-degree.

```{r}

degree_sd_func <- function(g, years){
  
degrees <- degree(g, mode = "all")
avg_degree <- mean(degrees)
degree_sd <- sd(degrees)

max_degree_index <- which.max(degrees)

node_name <- V(g)$name[max_degree_index]

max_degree <- degrees[max_degree_index]


p <-ggplot() + 
  geom_histogram(aes(x=degree(g,mode="all"))) + 
  labs(x="Degree",y="Density")+
  ggtitle(paste("Degree Distribution of", years))+
  annotate("text", x = 900, y = 20, 
           label = paste("Average Degree:", round(avg_degree, 2)), 
           size = 4) +
  annotate("text", x = 900, y = 18, 
             label = paste("Degree SD:", round(degree_sd, 2)), 
             size = 4)+
  annotate("text", x = 900, y = 16, 
           label = paste("Maximum degree:", round(max_degree, 2)),
            size = 4)+
  annotate("text", x = 900, y = 14, 
            label = paste("Node: ", node_name), 
            size = 4)

print(p)

plog <- ggplot() + 
  geom_histogram(aes(x = degree(g, mode = "all")), bins = 30) + 
  scale_x_continuous(trans = "log10", breaks = c(1, 10, 100, 1000), labels = c(1, 10, 100, 1000)) +
  scale_y_continuous(trans = "log10", breaks = c(0.1, 1, 10, 100)) +
  labs(x = "Degree (log)", y = "Density (log)") +
  ggtitle(paste("Degree Distribution of", years, "in a log-log-scale"))

print(plog)

}


for (i in seq_along(nodes)){
  
    degree_sd_func(g = nodes[[i]], years = years[i])
    
}


```

### 3. Assortativity

High degree nodes connect to other high degree nodes

Assortativity coefficient: Pearson correlation between the degrees of connected nodes

-   *What is the assortativity (degree) in the network?*

```{r}

assortativity_func <- function(g, years){
  
 assort <- assortativity_degree(g) 
 print(paste0("The assortativity of network ", years, " is ", assort))

}

for (i in seq_along(nodes)){
  
    transitivity_func(g = nodes[[i]], years = years[i])
  }
    
```

### 4. Transitivity

Nodes tend to share mutual relationships, your friends are likely to be friends among themselves too.

This 'clustering' is measured with the 'clustering coefficient' (or transitivity)

-   *What is the clustering coefficient (transitivity) in the network?*

```{r}

transitivity_func <- function(g, years){
  
 trans <- transitivity(g, weights = E(g)$Value ) 
 
 print(paste0("The transivity of network ", years, " is ", trans))

}

for (i in seq_along(nodes)){
  
    transitivity_func(g = nodes[[i]], years = years[i])
    
}

```

### 5. Community structure

-   *Using the Louvain method, does the network have a community structure? If so, what is its modularity?*

-   COMPARE WITH UNDIRECTED LOUVAIN AND FIX GRAPH

FROM CHAT!! Modularity is a measure used in network analysis to evaluate the quality of community structure within a network. It quantifies the degree to which a network can be partitioned into distinct groups or communities based on the connections between nodes.

In essence, modularity measures the extent to which the connections within communities are denser compared to connections between communities. A network with high modularity has dense connections within communities and sparse connections between communities, indicating clear and well-defined community structure.

```{r}


community_func <- function(g, years){
  
cw<-cluster_walktrap(g)
cw_weight<-cluster_walktrap(g, weights =  E(g)$value)

membership_cw <-membership(cw)
membership_cw_weight <-membership(cw_weight)

print(head(membership_cw))
print(head(membership_cw_weight))

size_cw <-sizes(cw)
size_cw_weight <-sizes(cw_weight)

print(size_cw)
print(size_cw_weight)

modularity_cw <-modularity(cw) #How good are the communities?
modularity_cw_weight<-modularity(cw_weight)

print(modularity_cw)
print(modularity_cw_weight)

par(mfrow=c(1,2))  
ll <- layout.kamada.kawai(g)

plot(cw,
     g, 
     layout=ll,
     vertex.label="",
     vertex.size = 10,
     edge.width = 0.5,
     edge.arrow.size = 0.01,
     main = paste0("Unweighted network:", years))

plot(cw_weight,
     g,
     layout=ll,
     vertex.label="",
     vertex.size = 10,
     edge.width = 0.5,
     edge.arrow.size = 0.01,
     main = paste0("Weighted network:", years))
}

for (i in seq_along(nodes)){
  
    community_func(g = nodes[[i]], years = years[i])
}
    

```

```{r}
cw<-cluster_walktrap(g1970)
cw_weight<-cluster_walktrap(g1970, weights =  E(g1970)$Value)

membership_cw <-membership(cw)
membership_cw_weight <-membership(cw_weight)

print(head(membership_cw))
print(head(membership_cw_weight))

size_cw <-sizes(cw)
size_cw_weight <-sizes(cw_weight)


print(size_cw)
print(size_cw_weight)

modularity_cw <-modularity(cw) #How good are the communities?
modularity_cw_weight<-modularity(cw_weight)

print(modularity_cw)
print(modularity_cw_weight)

par(mfrow=c(1,2))  
ll <- layout.kamada.kawai(g1960)

plot(cw,
     g1960, 
     layout=ll,
     vertex.label="",
     vertex.size = 10,
     edge.width = 0.5,
     edge.arrow.size = 0.01,
     main = paste0("Unweighted network:", years))

plot(cw_weight,
     g1960,
     layout=ll,
     vertex.label="",
     vertex.size = 10,
     edge.width = 0.5,
     edge.arrow.size = 0.01,
     main = paste0("Weighted network:", years))
```

-   *Test that the clustering coefficient in the network cannot be statistically explained by a configuration model in which the nodes have the same degree as the original.*

```{r}

transitivity(g1960)
transitivity(sample_degseq(degree(g1960)))

#Generate the distribution of clustering values from the degree-sequence models with the same degree sequence as the original network.
trans_model <- replicate(1000,transitivity(sample_degseq(degree(g1960))))

#Compare the actual value from the enron network with the distribution of values from the degree-sequence model
ggplot() + geom_density(aes(x=trans_model)) +
  geom_vline(xintercept = transitivity(g1960),linetype=2)

#Assuming the distribution for the degree-sequence is Gaussian, then the p-value of our hypothesis is
dnorm(transitivity(g1960),mean=mean(trans_model),sd=sd(trans_model))
```

### Visualisation

-   *Visualize the neighborhood of the node with the largest centrality (closeness)*

```{r}

```

```{r}


network_func <- function(origin, destination, year){
  
  # Create edge list
  edges_un <- data %>%
    drop_na() %>%
    group_by(!!sym(origin), !!sym(destination)) %>%
    mutate(total = sum(!!sym(year))) %>%
    ungroup() %>%
    group_by(!!sym(destination)) %>%
    mutate(immigration = sum(total)) %>%
    ungroup() %>%
    group_by(!!sym(origin)) %>%
    mutate(emigration = sum(total)) %>%
    ungroup() %>%
    distinct(!!sym(origin), !!sym(destination), total, immigration, emigration, .keep_all = TRUE) %>%
    select(!!sym(destination), !!sym(origin), immigration, emigration, total)
  

edges <-edges_un |> 
filter(total > 5000) 

nodes <- data |> 
  select(!!sym(origin)) |> 
  distinct(!!sym(origin))



g <- graph_from_data_frame(edges,vertices=nodes, directed = TRUE)

g <- simplify(g,remove.multiple = T,remove.loops = T)



par(mar=c(0,0,0,0))

# Remove unconnected nodes from the graph
unconnected_nodes <- V(g)[degree(g, mode = "all") == 0]
g <- delete_vertices(g, unconnected_nodes)


normalized_values <- scales::rescale( degree(g), to = c(1, 15))

V(g)$vertex_degree <- normalized_values

emigration <-edges_un |> 
  distinct(!!sym(origin), emigration)  
  

immigration <- edges_un |> 
  distinct(!!sym(destination), immigration)



node_names <- vertex_attr(g, "name")


net_migration <- emigration |> 
left_join(immigration, by = setNames(destination, origin))|> 
 mutate(immigration = ifelse(is.na(immigration), 0, immigration)) |> 
  mutate(net_migration = (immigration - emigration)) |> 
  filter(!!sym(origin) %in% node_names)

net_migration_c <- if_else(net_migration$net_migration > 0, "#AFE1AF", "#FF5733")
V(g)$colour <- net_migration_c

# Generate an initial layout using the Kamada-Kawai algorithm
initial_layout <- layout_with_kk(g)

# Increase node separation manually
adjusted_layout <- initial_layout * 10

plot(g,
     size=degree(g),
     vertex.size = V(g)$vertex_degree,
     vertex.color = V(g)$colour,
     vertex.frame.color = V(g)$colour,
     layout = adjusted_layout,
     vertex.label.cex = 0.8,
     vertex.label.color="black",
     edge.width = 0.5,
     edge.arrow.size = 0.01, asp = 0,
     edge.curved = T,
     vertex.label.family = "mono",
     asp = 0.8)

}




network_func(origin= "cntr_origin_code", destination = "cntr_dest_code", year = "y1960")


origin <- c(rep("cntr_origin_code", 5), rep("sub_region_origin", 5))

destination <- c(rep("cntr_dest_code", 5), rep("sub_region_dest", 5))

year <- c("y1960", "y1970", "y1980", "y1990", "y2000", "y1960", "y1970", "y1980", "y1990", "y2000")


x<- list()

for (y in seq_along(year)){
  
  x[[y]] <- network_func(origin[y], destination[y], year[y])
  
}
```

```{r}
# Normalize the total number of migrants to a reasonable range of edge widths
#min_width <- 0.5  # Minimum edge width
#max_width <- 5  # Maximum edge width
#total_migrants <- edges_1960$total_1960
#normalized_width <- scales::rescale(total_migrants, to = c(min_width, max_width))
#
## Add edge widths to the graph
#E(g)$width <- normalized_width
#
#library(RColorBrewer)
#
#color_palette <- brewer.pal(5, "PRGn")
#
## Normalize the total number of migrants to a range between 0 and the number of #colors in the scale
#normalized_values <- scales::rescale(total_migrants, to = c(0, 5))
#
## Map the normalized values to colors in the color scale
#edge_colors <- color_palette[cut(normalized_values, 5)]

# Add edge colors to the graph
#E(g)$color <- edge_colors

```
