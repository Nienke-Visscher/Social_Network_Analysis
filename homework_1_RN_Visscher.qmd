---
title: "Homework 1"
format: html
editor: visual
---

1\. What is the number of nodes and links?

2\. What is the average degree in the network? And the standard deviation of the degree?

3. Plot the degree distribution in linear-linear scale and in log-log-scale. What is the degree of the most connected node?

4. What is the clustering coefficient (transitivity) in the network?

5\. What is the assortativity (degree) in the network?

6\. Using the Louvain method, does the network have a community structure? If so, what is its modularity?

7\. Test that the clustering coefficient in the network cannot be statistically explained by a configuration model in which the nodes have the same degree as the original.

8. Visualize the neighborhood of the node with the largest centrality (closeness)

```{r}
library(tidyverse)
library(igraph)
library(igraphdata)
library(jsonlite)
library(visNetwork)
library(widgetframe)
library(ggthemes)
```

```{r}
data <-read.csv("migration_data.csv")
pop_data <- read.csv("population_data.csv")
continents <- read.csv("continents2.csv") |> 
  select(alpha.3, sub.region, region)

data <- data |> 
  rename(cntr_origin = Country.Origin.Name,
         cntr_origin_code = Country.Origin.Code,
         gender = Migration.by.Gender.Name,
         gender_code = Migration.by.Gender.Code,
         cntr_dest = Country.Dest.Name,
         cntr_dest_code = Country.Dest.Code,
         "y1960" = X1960..1960.,
         "y1970" = X1970..1970.,
         "y1980" = X1980..1980.,
         "y1990" = X1990..1990.,
         "y2000" = X2000..2000.) |> 
  mutate(y1960 = as.numeric(y1960),
         y1970 = as.numeric(y1970),
         y1980 = as.numeric(y1980),
         y1990 = as.numeric(y1990),
         y2000 = as.numeric(y2000)) |> 
  left_join(continents, by = c("cntr_origin_code" = "alpha.3")) |> 
  rename(sub_region_origin = sub.region,
         region_origin = region) |> 
  left_join(continents, by = c("cntr_dest_code" = "alpha.3")) |> 
  rename(sub_region_dest = sub.region,
         region_dest = region)

pop_data <- pop_data |> 
  rename(cntr = Country.Name,
         cntr_code = Country.Code,
         "pop_y1960" = X1960,
         "pop_y1970" = X1970,
         "pop_y1980" = X1980,
         "pop_y1990" = X1990,
         "pop_y2000" = X2000) |> 
  select(cntr, cntr_code, pop_y1960, pop_y1970, pop_y1980, pop_y1990, pop_y2000)

```

```{r}
head(V(g))
V(gSW)[1]
which(V(g)=="AFG")
which(V(g)$name=="AFG")

head(V(g)[.nei("AFG")])
head(V(g)[.nei("CAN")])

head(neighbors(g,"AFG")) #get the int. ids of a node’s neighbor
head(neighbors(g,"CAN")) #get the int. ids of a node’s neighbor
head(incident(g,"AFG")) #get the incident edges to a node
```

```{r}

# Create edge list
edges_1960_un <- data |> 
  drop_na() |> 
  group_by(cntr_origin_code, cntr_dest_code) |> 
  mutate(total_1960 = sum(y1960)) |> 
  ungroup() |> 
  group_by(cntr_dest_code) |> 
  mutate(immigration = sum(total_1960)) |> 
  ungroup() |> 
  group_by(cntr_origin_code) |> 
  mutate(emigration = sum(total_1960)) |> 
  ungroup() |> 
  distinct(cntr_origin_code, cntr_dest_code, total_1960, immigration, emigration, .keep_all = TRUE) |> 
  select(cntr_dest_code, cntr_origin_code,  immigration, emigration, total_1960)

edges_1960 <-edges_1960_un |> 
filter(total_1960 > 5000) 

nodes <- data |> 
  select(cntr_origin_code) |> 
  distinct(cntr_origin_code)



g <- graph_from_data_frame(edges_1960,vertices=nodes, directed = TRUE)

g <- simplify(g,remove.multiple = T,remove.loops = T)



par(mar=c(0,0,0,0))

# Remove unconnected nodes from the graph
unconnected_nodes <- V(g)[degree(g, mode = "all") == 0]
g <- delete_vertices(g, unconnected_nodes)


normalized_values <- scales::rescale( degree(g), to = c(1, 15))

V(g)$vertex_degree <- normalized_values

emigration <-edges_1960_un |> 
  distinct(cntr_origin_code, emigration)  
  

immigration <- edges_1960_un |> 
  distinct(cntr_dest_code, immigration)

node_names <- vertex_attr(g, "name")


net_migration <- emigration |> 
  left_join(immigration, by = c("cntr_origin_code" = "cntr_dest_code")) |> 
 mutate(immigration = ifelse(is.na(immigration), 0, immigration)) |> 
  mutate(net_migration = (immigration - emigration)) |> 
  filter(cntr_origin_code %in% node_names)

net_migration_c <- if_else(net_migration$net_migration > 0, "#AFE1AF", "#FF5733")
V(g)$colour <- net_migration_c

# Generate an initial layout using the Kamada-Kawai algorithm
initial_layout <- layout_with_kk(g)

# Increase node separation manually
adjusted_layout <- initial_layout * 10

plot(g,
     size=degree(g),
     vertex.size = V(g)$vertex_degree,
     vertex.color = V(g)$colour,
     vertex.frame.color = V(g)$colour,
     layout = adjusted_layout,
     vertex.size = 2,
     vertex.label.cex = 0.8,
     vertex.label.color="black",
     edge.width = 0.5,
     edge.arrow.size = 0.01, asp = 0,
     edge.curved = T,
     vertex.label.family = "mono",
     asp = 0.8)





```

```{r}


network_func <- function(origin, destination, year){
  
  # Create edge list
  edges_un <- data %>%
    drop_na() %>%
    group_by(!!sym(origin), !!sym(destination)) %>%
    mutate(total = sum(!!sym(year))) %>%
    ungroup() %>%
    group_by(!!sym(destination)) %>%
    mutate(immigration = sum(total)) %>%
    ungroup() %>%
    group_by(!!sym(origin)) %>%
    mutate(emigration = sum(total)) %>%
    ungroup() %>%
    distinct(!!sym(origin), !!sym(destination), total, immigration, emigration, .keep_all = TRUE) %>%
    select(!!sym(destination), !!sym(origin), immigration, emigration, total)
  

edges <-edges_un |> 
filter(total > 5000) 

nodes <- data |> 
  select(!!sym(origin)) |> 
  distinct(!!sym(origin))



g <- graph_from_data_frame(edges,vertices=nodes, directed = TRUE)

g <- simplify(g,remove.multiple = T,remove.loops = T)



par(mar=c(0,0,0,0))

# Remove unconnected nodes from the graph
unconnected_nodes <- V(g)[degree(g, mode = "all") == 0]
g <- delete_vertices(g, unconnected_nodes)


normalized_values <- scales::rescale( degree(g), to = c(1, 15))

V(g)$vertex_degree <- normalized_values

emigration <-edges_un |> 
  distinct(!!sym(origin), emigration)  
  

immigration <- edges_un |> 
  distinct(!!sym(destination), immigration)



node_names <- vertex_attr(g, "name")


net_migration <- emigration |> 
left_join(immigration, by = setNames(destination, origin))|> 
 mutate(immigration = ifelse(is.na(immigration), 0, immigration)) |> 
  mutate(net_migration = (immigration - emigration)) |> 
  filter(!!sym(origin) %in% node_names)

net_migration_c <- if_else(net_migration$net_migration > 0, "#AFE1AF", "#FF5733")
V(g)$colour <- net_migration_c

# Generate an initial layout using the Kamada-Kawai algorithm
initial_layout <- layout_with_kk(g)

# Increase node separation manually
adjusted_layout <- initial_layout * 10

plot(g,
     size=degree(g),
     vertex.size = V(g)$vertex_degree,
     vertex.color = V(g)$colour,
     vertex.frame.color = V(g)$colour,
     layout = adjusted_layout,
     vertex.size = 2,
     vertex.label.cex = 0.8,
     vertex.label.color="black",
     edge.width = 0.5,
     edge.arrow.size = 0.01, asp = 0,
     edge.curved = T,
     vertex.label.family = "mono",
     asp = 0.8)

}




network_func(origin= "cntr_origin_code", destination = "cntr_dest_code", year = "y1960")


origin <- c(rep("cntr_origin_code", 5), rep("sub_region_origin", 5))

destination <- c(rep("cntr_dest_code", 5), rep("sub_region_dest", 5))

year <- c("y1960", "y1970", "y1980", "y1990", "y2000", "y1960", "y1970", "y1980", "y1990", "y2000")


x<- list()

for (y in seq_along(year)){
  
  x[[y]] <- network_func(origin[y], destination[y], year[y])
  
}
```

```{r}
# Normalize the total number of migrants to a reasonable range of edge widths
#min_width <- 0.5  # Minimum edge width
#max_width <- 5  # Maximum edge width
#total_migrants <- edges_1960$total_1960
#normalized_width <- scales::rescale(total_migrants, to = c(min_width, max_width))
#
## Add edge widths to the graph
#E(g)$width <- normalized_width
#
#library(RColorBrewer)
#
#color_palette <- brewer.pal(5, "PRGn")
#
## Normalize the total number of migrants to a range between 0 and the number of #colors in the scale
#normalized_values <- scales::rescale(total_migrants, to = c(0, 5))
#
## Map the normalized values to colors in the color scale
#edge_colors <- color_palette[cut(normalized_values, 5)]

# Add edge colors to the graph
#E(g)$color <- edge_colors

```
